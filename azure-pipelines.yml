jobs:
- job:
  strategy:
    matrix:
      Linux-Icarus-py27:
        python.version: '2.7'
        imageName: 'ubuntu-16.04'
        SIM: icarus
      Linux-Icarus-py37:
        python.version: '3.7'
        imageName: 'ubuntu-16.04'
        SIM: 'icarus'
      Linux-GHDL-py37:
        python.version: '3.7'
        imageName: 'ubuntu-16.04'
        SIM: 'ghdl'
      Windows-Icarus-py37:
        python.version: '3.7'
        imageName: 'win1803'
        SIM: 'icarus'
      Mac-Icarus-py37:
        imageName: 'macos-10.13'
        python.version: '3.7'
        SIM: 'icarus'

  pool:
    vmImage: $(imageName)
  variables:
    SIM: $(SIM)
  
  steps:    
  - powershell: |
        Invoke-WebRequest -outfile miniconda3.exe https://repo.continuum.io/miniconda/Miniconda3-latest-Windows-x86_64.exe
        Start-Process .\miniconda3.exe -ArgumentList '/S /D=C:\miniconda3' -Wait
        Write-Host "##vso[task.prependpath]C:\miniconda3;C:\miniconda3\Library\mingw-w64\bin;C:\miniconda3\Library\usr\bin;C:\miniconda3\Library\bin;C:\miniconda3\Scripts;C:\miniconda3\bin;C:\miniconda3\condabin"
    displayName: Download and Install Anaconda on Windows
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    
  - script: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
    
  - script: |
      sudo chown -R $USER $CONDA
      gcc --version
    displayName: Take ownership of conda installation
    condition: eq( variables['Agent.OS'], 'Darwin' )
    
  - script: |
      conda update -q -y conda
      conda init
    displayName: Update conda

  - script: conda install --yes m2w64-gcc libpython
    displayName: Install Windows conda development
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    
  - script: |
       conda create -n myenv -y python=$(python.version)
    displayName: Create Anaconda environment
    
  - script: |
      conda activate myenv
    displayName: Activate Anaconda environment on Windows
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    
  - script: |
      source activate myenv
    displayName: Activate Anaconda environment
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
    
  - script: |
      sudo apt-get update
      sudo apt-get install -y gperf flex bison
      git clone https://github.com/steveicarus/iverilog.git --depth=1 --branch v10_2
      cd iverilog && autoconf && ./configure && make -j && sudo make install && cd ..
    displayName: Compile and Install Icarus Verilog on Linux
    condition: and( eq( variables['Agent.OS'], 'Linux' ), eq( variables['SIM'], 'icarus'))
    
  - script: |
      sudo apt-get update
      sudo apt-get install -y gnat-4.9
      git clone https://github.com/ghdl/ghdl.git --depth=1 --branch v0.36
      cd ghdl && ./configure && make -j2 && sudo make install && cd ..
    displayName: Compile and Install GHDL on Linux
    condition: and( eq( variables['Agent.OS'], 'Linux' ), eq(variables['SIM'], 'ghdl'))
    
  - script: brew install icarus-verilog
    displayName: Install Icarus Verilog on Mac
    condition: eq( variables['Agent.OS'], 'Darwin' )  
    
  - powershell: |
      Invoke-WebRequest -Uri http://bleyer.org/icarus/iverilog-v11-20190327-x64_setup.exe -OutFile iverilog-x64_setup.exe
      Start-Process .\iverilog-x64_setup.exe -ArgumentList '/VERYSILENT' -Wait
      Write-Host "##vso[task.prependpath]C:\iverilog\bin"
    displayName: 'Download and Install Icarus Verilog on Windows'
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

  - script: |
      echo "##vso[task.setvariable variable=SIM]$(SIM)"
    displayName: Set simulator
    
  - script: |
      pip install tox
      tox
    displayName: 'Package Test with Tox'
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
    
  - script: |
      pip install -e .
    displayName: 'Install cocotb-test'
    
  - script: |
      git clone https://github.com/potentialventures/cocotb
      pip install -e cocotb
    displayName: 'Install cocotb from source'
    
  - script: |
      set SIM=icarus
      pytest -s --junitxml=test-results.xml tests
    displayName: 'Test with pytest'

  - script: |
      cd tests; make
    displayName: 'Test Makefile flow (Linux only)'
    condition: and( eq( variables['Agent.OS'], 'Linux' ), eq(variables['SIM'], 'icarus'))
    
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: 'test-*.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'
